Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Parent Stack Configuration"
        Parameters:
          - ParentVPCStack
          # - ParentALBStack
      - Label:
          default: "Launch Template Configuration"
        Parameters:
          - InstanceType
          - ImageId
      - Label:
          default: "ASG Configuration"
        Parameters:
          - DesiredCapacity
          - MinSize
          - MaxSize

Parameters:
  ParentVPCStack:
    Type: String
    Description: "Name of the VPC stack to pull configuration from."
  ParentALBStack:
    Type: String
    Description: "Name of the ALB stack to pull configuration from."
  InstanceType:
    Type: String
    Default: "t2.micro"
  ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The AMI ID for the ECS-optimized Amazon Linux 2023 AMI.
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/kernel-5.10/recommended/image_id
  DesiredCapacity:
    Type: Number
    Default: 1
  MaxSize:
    Type: Number
    Default: 1
  MinSize:
    Type: Number
    Default: 1
  StopContainerTimeoutInSeconds:
    Description: 'Time in seconds the ECS agent waits before killing a stopped container (see ECS_CONTAINER_STOP_TIMEOUT).'
    Type: Number
    Default: 30
    ConstraintDescription: 'Must be in the range [30-3600]'
    MinValue: 30
    MaxValue: 3600
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: Cluster
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: '30'
              DeleteOnTermination: true
        SecurityGroupIds:
          - !Ref SG
        UserData: !Base64 
          Fn::Sub:
            - |
              #!/bin/bash
              /usr/bin/echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config;
            - Cluster: !Sub "${AWS::StackName}-cluster"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Role
    Properties:
      Path: /
      Roles:
        - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECRPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"

  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EC2 hosts that run containers
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentALBStack}-SG'}

      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  
  ASG:
    DependsOn: Cluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-PrivateSubnets'}]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Join
            - ' - '
            - - ECS Instance
              - !Ref Cluster
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ASG
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 10
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  CPA:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref Cluster
      CapacityProviders:
        - !Ref CapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1

Outputs:
  ECSCluster:
    Description: The name of the ECS cluster
    Value: !Ref Cluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'
  ASG:
    Description: The ID of the Auto Scaling Group
    Value: !Ref ASG
    Export:
      Name: !Sub '${AWS::StackName}-ASG'
      
  SG:
    Description: The name of the ECS cluster
    Value: !Ref SG
    Export:
      Name: !Sub '${AWS::StackName}-SG'

  Role:
    Description: The name of the ECS cluster
    Value: !Ref Role
    Export:
      Name: !Sub '${AWS::StackName}-Role'