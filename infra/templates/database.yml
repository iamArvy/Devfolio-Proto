AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ParentVPCStack:
    Type: String
    Description: "Name of the VPC stack to pull configuration from."
  ParentClusterStack:
    Type: String
    Description: "Name of the ECS stack to pull configuration from."
  DBInstanceIdentifier:
    Type: String
    Default: "devfolio-db"
  DBEngine:
    Type: String
    Default: "postgres"
  DBVersion:
    Type: String
    Default: "15.3"
  EnableIAMAuth:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"

Resources:
  DB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Sub "{{resolve:ssm:/devfolio/db-name}}"
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBVersion
      DBInstanceClass: "db.t3.micro"
      AllocatedStorage: 20
      StorageType: "gp2"
      MultiAZ: false
      PubliclyAccessible: false
      MasterUsername: !Sub "{{resolve:ssm:/devfolio/db-user}}"
      MasterUserPassword: !Sub "{{resolve:ssm-secure:/devfolio/db-password}}"
      EnableIAMDatabaseAuthentication: !Ref EnableIAMAuth
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      DBSubnetGroupName: !Ref SubnetGroup
      BackupRetentionPeriod: 7

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for RDS PostgreSQL"
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-SG'}

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Sub '10.${ClassB}.64.0/20'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnet1

  # DBSubnet1RTA:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRT
  #     SubnetId: !Ref DBSubnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Sub '10.${ClassB}.80.0/20'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnet2

  # DBSubnet2RTA:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRT
  #     SubnetId: !Ref DBSubnet2

  SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet-group"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSubnetGroup
Outputs:
  RDSPostgresEndpoint:
    Description: "PostgreSQL database endpoint"
    Value: !GetAtt DB.Endpoint.Address
