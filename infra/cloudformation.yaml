AWSTemplateFormatVersion: '2010-09-09'

Description: <your stack description here>

Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.16.1.0/24
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MyVpc-InternetGateway

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVpc

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  RoutePublicIgw:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet

  # Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS
      VpcId: !Ref MyVpc
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECSSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref MyVpc
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP traffic
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBSecurityGroup

  ECSToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      Description: Allow ECS to access RDS

  ALBToECSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3001
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      Description: Allow ALB to access ECS

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB

  ALBTargetGroupService1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Service1-TG
      VpcId: !Ref MyVpc
      Protocol: HTTP
      Port: 3000
      TargetType: ip

  ALBTargetGroupService2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Service2-TG
      VpcId: !Ref MyVpc
      Protocol: HTTP
      Port: 3001
      TargetType: ip

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupService1
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-Cluster

  ECSTaskDefinitionService1:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: service1-task
      RequiresCompatibilities:
        - EC2
      Memory: '512'
      Cpu: '256'
      ContainerDefinitions:
        - Name: service1
          Image: <docker-image-service1>
          PortMappings:
            - ContainerPort: 3000

  ECSTaskDefinitionService2:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: service2-task
      RequiresCompatibilities:
        - EC2
      Memory: '512'
      Cpu: '256'
      ContainerDefinitions:
        - Name: service2
          Image: <docker-image-service2>
          PortMappings:
            - ContainerPort: 3001

  ECSServiceService1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinitionService1
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroupService1
          ContainerName: service1
          ContainerPort: 3000

  ECSServiceService2:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinitionService2
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroupService2
          ContainerName: service2
          ContainerPort: 3001
