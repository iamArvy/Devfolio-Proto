// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  clientId     String?   @unique @default(uuid())
  clientSecret String?
  passwordHash String
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  profile      Profile?
  contact      Contact[]
  socials      Social[]
  job          Job[]
  stack        Stack[]
  projects     Project[]

  @@map("users")
}

model Profile {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  image     String?
  about     String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Contact {
  id        Int      @id @default(autoincrement())
  url       String?
  icon      String?
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([name, userId])
  @@map("user_contacts")
}

model Social {
  id        Int      @id @default(autoincrement())
  url       String
  icon      String?
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([name, userId])
  @@map("user_socials")
}

model Job {
  id          Int       @id @default(autoincrement())
  role        String    @unique
  description String?
  value       String?
  stack       Stack[]
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([role, userId])
  @@map("user_jobs")
}

model Stack {
  id        Int       @id @default(autoincrement())
  name      String
  jobId     Int?
  icon      String?
  job       Job?      @relation(fields: [jobId], references: [id])
  project   Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@unique([name, userId])
  @@map("user_stacks")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  image       String?
  description String
  live        String?
  repo        String?
  jobId       Int?
  stack       Stack[]
  job         Job?     @relation(fields: [jobId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@unique([name, userId])
  @@map("user_projects")
}
